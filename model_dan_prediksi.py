# -*- coding: utf-8 -*-
"""Model dan Prediksi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LljeYPF0baidj6ZdlclLAyOGP-rwVqAc

# Proyek Menyelesaikan Permasalahan HR

*   Nama : Maria Goretti Risadniati Madsun
*   email : risadniati@gmail.com
*   ID Dicoding : icachan47

## Model Machine Learning untuk Memprediksi Attrition
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

main_df = pd.read_csv('modified_employee_data.csv')

"""Pada proyek ini, model machine learning akan memprediksi attrition karyawan dalam bentuk persentase."""

# Encode categorical features
label_encoders = {}
for column in main_df.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    main_df[column] = label_encoders[column].fit_transform(main_df[column])

# Define features and target
X = main_df.drop('Attrition', axis=1)
y = main_df['Attrition']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train Logistic Regression model with class_weight balanced
model = LogisticRegression(max_iter=1000, class_weight='balanced')
model.fit(X_train, y_train)

# Predict probabilities on test data
y_prob = model.predict_proba(X_test)

# Predict class labels based on threshold 0.5
y_pred = (y_prob[:, 1] >= 0.5).astype(int)

# Evaluate the model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['No Attrition', 'Attrition']))

print("\nAccuracy Score:")
print(accuracy_score(y_test, y_pred))

# Print the first few probabilities
print("\nFirst few predicted probabilities for attrition:")
print(y_prob[:5, 1])  # Predicted probabilities for attrition for the first few employees

# Visualizing the probability distribution
plt.figure(figsize=(10, 6))
plt.hist(y_prob[:, 1], bins=30, alpha=0.7)
plt.title('Distribution of Predicted Probabilities for Attrition')
plt.xlabel('Predicted Probability of Attrition')
plt.ylabel('Frequency')
plt.show()

"""Hasil dari prediksi :

Confusion Matrix
- True Negatives (TN) adalah jumlah prediksi benar untuk kelas 'No Attrition' yaitu sebesar 254
- False Positives (FP) adalah jumlah prediksi salah untuk kelas 'No Attrition' yaitu sebanyak 141
- False Negatives (FN) adalah jumlah prediksi salah untuk kelas 'Attrition', sebanyak 15
- True Positives yakni jumlah prediksi benar untuk kelas 'Attrition', sebanyak 31

Classification Matrix

No Attrition (Tidak Berhenti):
- Tingkat Presisi: 0.94, hal ini berarti 94% dari prediksi 'No Attrition' adalah benar
- Nilai Recall 0.64, maka 64% dari kasus 'No Attrition' yang sebenarnya terdeteksi benar
- F1-score: 0.77, yakni  rata-rata harmonis dari presisi dan recall

Attrition (Berhenti):
- Tingkat Presisi: 0.18, maka 18% dari prediksi 'Attrition' adalah benar
- Recall sebesar 0.67 (67% dari kasus 'Attrition' yang sebenarnya terdeteksi dengan benar)
- F1-score: 0.28 (Rata-rata harmonis dari presisi dan recall)

Overall Accuracy sebesar 0.65, yang menunjukkan 65% dari semua prediksi adalah benar

"""